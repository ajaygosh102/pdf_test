import 'dart:convert';import 'dart:io';import 'dart:typed_data';import 'package:dio/dio.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:path_provider/path_provider.dart';import 'package:pdf_flutter_app/data/user.dart';import 'package:pdf_flutter_app/data/user_dao.dart';import 'package:pdf_flutter_app/download%20and%20save/pdf_view.dart';import 'package:syncfusion_flutter_pdf/pdf.dart';class DownLoadPdf extends StatefulWidget {  @override  _DownLoadPdfState createState() => _DownLoadPdfState();}class _DownLoadPdfState extends State<DownLoadPdf> {  final imgUrl =      "https://hsit.ac.in/E-LEARNING/ELECTRICAL%20AND%20ELECTRONICS/V%20SEMESTER/MICROCONTROLLER%2015EE52/MC%20Notes%20all%20Modules.pdf";    //  "https://www.adobe.com/support/products/enterprise/knowledgecenter/media/c4611_sample_explain.pdf";  bool downloading = false;  bool isViewPdf = false;  var progressString = "";  double progressValue = 0.0;  File file;  File finalFile;  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text('Download'),      ),      body: Center(        child: Column(          mainAxisSize: MainAxisSize.min,          children: [            Visibility(                visible: downloading,                child: LinearProgressIndicator(                  value: progressValue / 100,                  minHeight: 10,                )),            Text(              progressString,              style: TextStyle(color: Colors.red),            ),            TextButton(              onPressed: () {                downloadFile();              },              child: Text('1 Download'),            ),            TextButton(              onPressed: () {                convertToByte(file).then((value) {                  print(value);                  setState(() {                     finalFile=value;                    isViewPdf = true;                  });                });              },              child: Text('2 Convert to byte and save'),            ),            Text(              isViewPdf?'Convert to binary and save to local db':'',              style: TextStyle(color: Colors.red),            ),            Visibility(              visible: isViewPdf,              child: TextButton(                onPressed: () {                  Navigator.push(                    context,                    MaterialPageRoute(                      builder: (context) => PdfViewT(file:finalFile),                    ),                  );                },                child: Text('View saved file'),              ),            ),            TextButton(              onPressed: () {                UserDao userDao = UserDao();                userDao.getAllSortedByName().then((value)async{                  print('object');                  print(value[0].bytes);                String path;                    final Directory directory = await getApplicationSupportDirectory();                path = directory.path;                final File file = File('$path/test.pdf');                await file.writeAsBytes(base64Decode(value[0].bytes), flush: true);                var file2= File('$path/test.pdf');                Navigator.push(                context,                MaterialPageRoute(                builder: (context) => PdfViewT(file:file2),                ),                );                });              },              child: Text('View File from local db'),            )          ],        ),      ),    );  }  Future<File> convertToByte(File file2) async {    final PdfDocument document =        PdfDocument(inputBytes: await _readDocumentData(file2));    final List<int> bytes = document.save();    UserDao _userDao = UserDao();    await _userDao.insert(User(bytes: base64Encode(bytes)));    ///bytes need to store in local db    document.dispose();    String path;    final Directory directory = await getApplicationSupportDirectory();    path = directory.path;    final File file = File('$path/test.pdf');    await file.writeAsBytes(bytes, flush: true);    return File('$path/test.pdf');  }  Future<List<int>> _readDocumentData(File file3) async {    // final ByteData data = await rootBundle.load('assets/$name');    // final ByteData data = await file.readAsBytes();    final Uint8List bytes = await file3.readAsBytes();    final ByteData data = ByteData.view(bytes.buffer);    return data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);  }  Future<void> downloadFile() async {    Dio dio = Dio();    try {      var dir = await getApplicationDocumentsDirectory();      await dio.download(imgUrl, "${dir.path}/test.pdf",          onReceiveProgress: (rec, total) {        print("Rec: $rec , Total: $total");        setState(() {          downloading = true;          progressString = ((rec / total) * 100).toStringAsFixed(0) + "%";          progressValue = ((rec / total) * 100).roundToDouble();        });      });      setState(() {        downloading = false;        progressString = "Completed";        file = File("${dir.path}/test.pdf");      });      print("Download completed");    } catch (e) {      print(e);      setState(() {        downloading = false;        progressString = "error";      });    }  }}