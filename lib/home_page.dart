/*import 'dart:io';import 'dart:ui';import 'package:advance_pdf_viewer/advance_pdf_viewer.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:path_provider/path_provider.dart';import 'package:pdf_flutter/pdf_flutter.dart';// import 'package:native_pdf_view/native_pdf_view.dart';import 'package:syncfusion_flutter_pdf/pdf.dart';class MyHomePage extends StatefulWidget {  @override  _MyHomePageState createState() => _MyHomePageState();}class _MyHomePageState extends State<MyHomePage> {  static final int _initialPage = 0;  int _actualPageNumber = _initialPage,      _allPagesCount = 0;  // PdfController pdfController;  bool isFullScreen = true;  var testpdf;  @override  void initState() {    // pdfController = PdfController(    //   document: PdfDocument.openAsset('assets/aeen101.pdf'),    //   initialPage: _initialPage,    // );   // _generatePDF();   // SystemChrome.setEnabledSystemUIOverlays([]);    super.initState();  }  @override  void dispose() {   // pdfController.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    return SafeArea(      child: Scaffold(        // backgroundColor: isFullScreen ? Colors.black : Colors.white,        backgroundColor:  Colors.white,        appBar: isFullScreen            ? null            : AppBar(          title: Text(            'Chapter 1',            style: TextStyle(color: Colors.black),          ),          actions: [            Icon(Icons.search_rounded),            SizedBox(              width: 8,            ),            Icon(Icons.brightness_4),            SizedBox(              width: 8,            ),            Icon(Icons.more_vert_outlined),          ],        ),        body:  FutureBuilder(          future: _generatePDF(),          builder: (context, snapshot) {            if(snapshot.hasData){              return PDF.file(                snapshot.data,                height:MediaQuery.of(context).size.height,                width: MediaQuery.of(context).size.width,              );              *//*return GestureDetector(                  onTap: () {                    setState(() {                      isFullScreen                          ? SystemChrome.setEnabledSystemUIOverlays(                          SystemUiOverlay.values)                          : SystemChrome.setEnabledSystemUIOverlays([]);                      isFullScreen = !isFullScreen;                      print(isFullScreen);                    });                  },                  child:                  PDF.file(                    snapshot.data,                    height: 200,                    width: 100,                  )                *//**//*Container(                  child: SfPdfViewer.asset(                    pdf,                      enableTextSelection: true,                  ),),),*//**//*                *//**//* PdfView(                    documentLoader: Center(child: CircularProgressIndicator()),                    pageLoader: Center(child: CircularProgressIndicator()),                    controller: pdfController,                    onDocumentLoaded: (document) {                      setState(() {                        _allPagesCount = document.pagesCount;                      });                    },                    onPageChanged: (page) {                      setState(() {                        _actualPageNumber = page;                      });                    },                  ),*//**//*              );*//*            }            return Container();          },        ),)    ,    );  }  Future<File> _generatePDF() async {    //Load the PDF document.    final PdfDocument document = PdfDocument(        inputBytes: await _readDocumentData('aeen101.pdf'));    //Get the page.    final PdfPage page = document.pages[0];    //Create a line annotation.    final PdfLineAnnotation lineAnnotation = PdfLineAnnotation(        [60, 710, 187, 710], 'Introduction',        color: PdfColor(0, 0, 255),        author: 'John Milton',        border: PdfAnnotationBorder(2),        lineCaption: false,        setAppearance: true,        lineIntent: PdfLineIntent.lineDimension);    //Add the line annotation to the page.    page.annotations.add(lineAnnotation);    //Create a ellipse Annotation.    final PdfEllipseAnnotation ellipseAnnotation = PdfEllipseAnnotation(        Rect.fromLTRB(475, 771, 549, 815), 'Page Number',        author: 'John Milton',        border: PdfAnnotationBorder(2),        color: PdfColor(255, 0, 0),        setAppearance: true);    //Add the ellipse annotation to the page.    page.annotations.add(ellipseAnnotation);    //Create a rectangle annotation.    final PdfRectangleAnnotation rectangleAnnotation = PdfRectangleAnnotation(        Rect.fromLTRB(57, 250, 565, 349), 'Usage',        color: PdfColor(255, 170, 0),        border: PdfAnnotationBorder(2),        author: 'John Milton',        setAppearance: true);    //Add the rectangle annotation to the page.    page.annotations.add(rectangleAnnotation);   // Create a polygon annotation.    final PdfPolygonAnnotation polygonAnnotation = PdfPolygonAnnotation(        [129, 356, 486, 356, 532, 333, 486, 310, 129, 310, 83, 333, 129, 356],        'Chapter 1 Conceptual Overview',        color: PdfColor(255, 0, 0),        border: PdfAnnotationBorder(2),        author: 'John Milton',        setAppearance: true);    //Add the polygon annotation to the page.    page.annotations.add(polygonAnnotation);    //Save and dispose the document.    final List<int> bytes = document.save();    document.dispose();    //Launch file.   // await FileSaveHelper.saveAndLaunchFile(bytes, 'Annotations.pdf');String path='';    final Directory directory = await getApplicationSupportDirectory();    path = directory.path;    final File file =    File(Platform.isWindows ? '$path\\Annotations.pdf' : '$path/Annotations.pdf');    await file.writeAsBytes(bytes, flush: true);    final Directory directory2 = await getApplicationSupportDirectory();   var path2 = directory2.path;   // setState(() {      testpdf=File('$path2/Annotations.pdf');   // });    print('pdf----------');    print(testpdf);return testpdf;  }  Future<List<int>> _readDocumentData(String name) async {    final ByteData data = await rootBundle.load('assets/$name');    return data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);  }}*/